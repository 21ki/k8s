error_log stderr notice;
{{ $servers := split (getenv "CPU_NUM") "," }}{{range $servers}}
worker_processes {{.}};
{{end}}
events {
  multi_accept on;
  use epoll;
  worker_connections 4096;
}

stream {
        upstream kube_apiserver {
            {{ $servers := split (getenv "CP_HOSTS") "," }}{{range $servers}}
            server {{.}}:BACKEND_PORT;
            {{end}}
            check interval=1000 rise=2 fall=5 timeout=2000 default_down=true type=tcp;
        }

        server {
          {{ $servers := split (getenv "HOST_PORT") "," }}{{range $servers}}
            listen        {{.}};
            listen        [::]:{{.}} ipv6only=on;
            {{end}}
            proxy_pass    kube_apiserver;
            proxy_timeout 30;
            proxy_connect_timeout 2s;

        }

}

#http {
#    server {
#        listen 8099;
#
#        # status interface
#        location /status {
#            healthcheck_status;
#        }
#    }
#}